// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String    @db.VarChar(80)
  lastName  String?   @db.VarChar(100)
  email     String    @unique @db.VarChar(80)
  password  String    @db.VarChar(255)
  birthDate DateTime  @db.Date
  state     Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  otbs      Otb[]
  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  likes       Like[]
}

model Otb {
  id      String @id @default(uuid())
  userOtb User   @relation(fields: [userId], references: [id])
  userId  String
  token   Int
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  userSession User     @relation(fields: [userId], references: [id])
  token       String
  isEnabled   Boolean  @default(true)
  lifetime    Int
  timeOut     DateTime
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)
}

model Post {
  id        String    @id @default(uuid())
  userId    String
  userPost  User      @relation(fields: [userId], references: [id])
  title     String    @db.VarChar(80)
  content   String    @db.Text
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  comments  Comment[]
  likes       Like[]
}

model Comment {
  id          String   @id @default(uuid())
  userId      String
  userComment User     @relation(fields: [userId], references: [id])
  postId      String
  postComment Post     @relation(fields: [postId], references: [id])
  content     String   @db.Text
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)
}

model Like {
  id        String    @id @default(uuid())
  userId    String
  userLike  User      @relation(fields: [userId], references: [id])
  postId    String
  postLike  Post      @relation(fields: [postId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
}
